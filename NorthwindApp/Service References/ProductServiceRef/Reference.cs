//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.296
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace NorthwindApp.ProductServiceRef {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/NorthwindServices")]
    [System.SerializableAttribute()]
    public partial class ServiceException : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsCriticalField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MessageField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsCritical {
            get {
                return this.IsCriticalField;
            }
            set {
                if ((this.IsCriticalField.Equals(value) != true)) {
                    this.IsCriticalField = value;
                    this.RaisePropertyChanged("IsCritical");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message {
            get {
                return this.MessageField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageField, value) != true)) {
                    this.MessageField = value;
                    this.RaisePropertyChanged("Message");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ProductServiceRef.IProducts")]
    public interface IProducts {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProducts/GetProductName", ReplyAction="http://tempuri.org/IProducts/GetProductNameResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(NorthwindApp.ProductServiceRef.ServiceException), Action="http://tempuri.org/IProducts/GetProductNameServiceExceptionFault", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/NorthwindServices")]
        string GetProductName(int productID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProducts/GetProductQty", ReplyAction="http://tempuri.org/IProducts/GetProductQtyResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(NorthwindApp.ProductServiceRef.ServiceException), Action="http://tempuri.org/IProducts/GetProductQtyServiceExceptionFault", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/NorthwindServices")]
        int GetProductQty(int productID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProducts/GetCategoryName", ReplyAction="http://tempuri.org/IProducts/GetCategoryNameResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(NorthwindApp.ProductServiceRef.ServiceException), Action="http://tempuri.org/IProducts/GetCategoryNameServiceExceptionFault", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/NorthwindServices")]
        string GetCategoryName(int productID);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IProductsChannel : NorthwindApp.ProductServiceRef.IProducts, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ProductsClient : System.ServiceModel.ClientBase<NorthwindApp.ProductServiceRef.IProducts>, NorthwindApp.ProductServiceRef.IProducts {
        
        public ProductsClient() {
        }
        
        public ProductsClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ProductsClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ProductsClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ProductsClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string GetProductName(int productID) {
            return base.Channel.GetProductName(productID);
        }
        
        public int GetProductQty(int productID) {
            return base.Channel.GetProductQty(productID);
        }
        
        public string GetCategoryName(int productID) {
            return base.Channel.GetCategoryName(productID);
        }
    }
}
